Index: src/main/java/za/ac/cput/repository/IProductRepository.java
===================================================================
diff --git a/src/main/java/za/ac/cput/repository/IProductRepository.java b/src/main/java/za/ac/cput/repository/IProductRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/za/ac/cput/repository/IProductRepository.java	
@@ -0,0 +1,7 @@
+package za.ac.cput.repository;
+
+import za.ac.cput.domain.Product;
+import java.util.List;
+public interface IProductRepository extends IRepository<Product, String>{
+    List<Product> getall();
+}
Index: src/main/java/za/ac/cput/repository/impl/ProductImageRepositoryImpl.java
===================================================================
diff --git a/src/main/java/za/ac/cput/repository/impl/ProductImageRepositoryImpl.java b/src/main/java/za/ac/cput/repository/impl/ProductImageRepositoryImpl.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/za/ac/cput/repository/impl/ProductImageRepositoryImpl.java	
@@ -0,0 +1,64 @@
+package za.ac.cput.repository.impl;
+
+import za.ac.cput.domain.ProductImage;
+import za.ac.cput.repository.IProductImageRepository;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ProductImageRepositoryImpl implements IProductImageRepository {
+    private static  IProductImageRepository repository = null;
+    private List<ProductImage> productImageList;
+
+    private ProductImageRepositoryImpl(){
+        productImageList = new ArrayList<ProductImage>();
+    }
+    public static IProductImageRepository getRepository(){
+        if(repository == null){
+            repository = new ProductImageRepositoryImpl();
+        }
+        return repository;
+    }
+
+    @Override
+    public ProductImage create(ProductImage productImage) {
+        boolean success = productImageList.add(productImage);
+        if(success)
+            return productImage;
+        return null;
+    }
+
+    @Override
+    public ProductImage read(int id) {
+        for(ProductImage p: productImageList){
+            if(p.getImageID() == id){
+                return p;
+        }
+        return null;
+    }
+
+    @Override
+    public ProductImage update(ProductImage productImage) {
+        int imageID = productImage.getImageID;
+        if(delete(imageID)){
+            if(productImageList.add(productImage)){
+                return productImage;
+            } else
+                return null;
+        }
+        return null;
+    }
+
+    @Override
+    public boolean delete(int id) {
+        ProductImage productImageToDelete = read(id);
+        if(productImageToDelete == null){
+            return false;
+        }
+        return (productImageList.remove(productImageToDelete));
+    }
+
+    @Override
+    public List<ProductImage> getAll() {
+        return null;
+    }
+}
Index: src/main/java/za/ac/cput/repository/IProductImageRepository.java
===================================================================
diff --git a/src/main/java/za/ac/cput/repository/IProductImageRepository.java b/src/main/java/za/ac/cput/repository/IProductImageRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/za/ac/cput/repository/IProductImageRepository.java	
@@ -0,0 +1,8 @@
+package za.ac.cput.repository;
+
+import za.ac.cput.domain.ProductImage;
+import java.util.List;
+
+public interface IProductImageRepository extends IRepository<ProductImage, String>{
+    List<ProductImage> getAll();
+}
